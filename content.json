{"pages":[],"posts":[{"title":"SSM框架学习——数据库、url-pattern导致的问题","text":"前言在学习SSM框架时，导入一个已有项目，修改了mysql等一系列常规配置后，发现要实现简单的运行，也存在着系列的问题，感觉也比较典型，作如下记录。 问题1. mysql 5 迁移到 mysql 8 12345678# 1. connector jar包 connector 5.0 -> connector 8.0 # 2. jdbc 驱动更改‘com.mysql.jdbc.Driver’ -> ‘com.mysql.cj.jdbc.Driver’# 3. 数据库连接的url更改jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&serverTimezone=Asia/Shanghai 数据库设置迁移中有几个报错和注意，读者需牢记： serverTimeZone 大小写注意，错一个都不行。报错形式：java.sql.SQLException: No timezone mapping entry for … serverTimeZone的值设置有讲究，报错形式：The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized xml中使用实体符号代替直接输入& 否则tomcat报错如下：ERROR [main] - Context initialization failedorg.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 26 in XMLdocument from class path resource [applicationContext.xml] is invalid; nested exception # is org.xml.sax.SAXParseException; lineNumber: 26; columnNumber: 90; 对实体“serverTimezone” 的引用必须以 ‘;’ 分隔符结尾。 2. 为何需要设置时区？ 为什么普通的请求和我的时区也会有关系，时区对程序的影响是什么？ 请参考：https://blog.csdn.net/xiuliyan6124/article/details/80630293 mysql窗口中查看自己的时区是跟随系统的，而我们所在时区为东八区，你可以将时区调整为+8，或者将时区设置为Asia/shanghai即可。 1jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&serverTimezone=Asia/Shanghai 3. 访问页面后直接返回的是jsp源码 错误原因：web.xml中url pattern 中 / 和 /*的不同 请参考：https://blog.csdn.net/xiuliyan6124/article/details/80630293","link":"/2020/01/04/%E8%AE%A1%E7%AE%97%E6%9C%BA/SSM%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%81url-pattern%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98/"},{"title":"vps实现ss代理","text":"通过shadowsocks来实现科学上网已经是家常便饭，今天就如何配置做一篇分享。 适用环境服务端：centos 7 系统 适用客户端：windows 10 、 移动端 具体步骤1.注册vultr账号&充值 一般需要选购国外服务器，而国内的服务器提供商虽然可以买到境外服务器，但是一般都禁止安装shadowsocks服务，这里推荐 vultr（使用该链接注册提供50$的体验费用，如果活动已过，通过访问 vultr2 注册账号）。 账号注册完毕，点击billing可以来到充值界面，并且这个网站可以使用支付宝 、 微信进行支付，非常方便。 支付完毕，账号就可以有60$到账。 2.下载服务器连接工具：mobaxterm mobaxterm，是一个免费的，功能齐全的远程连接工具，界面美观简洁。 3.选购合适的vps&部署shadowsocks服务端 点击左侧products 选择服务器类型 选择服务器地点 选择服务器系统 选择服务器规格 最后点击deploy now， 服务器就开始部署了。 4.检查服务器是否可用 由于监管原因，有些服务器ip地址或者ip地址是被封禁的，所以我们首先需要检查一下服务器是否可用，如果不可用，则你需要删除这个服务器实例，回到步骤3重新部署一个服务器，你可以选择一下子部署多个，然后挨个测试，遇到成功的把多余的删除即可。 检查ip是否可用 如上图，当你的服务器部署完毕，会提供给你一个ipv4地址，你在本地机器上ping 这个ip地址，如果最后ping不通，则服务器不可用。 检查端口是否可用 当你可以ping通你的ip，别高兴太早，可能你的22端口被封，检查端口，你需要进入mobaxterm， 点击session 选择ssh 输入服务器信息 如果端口没有封，他会提示你输入登录密码，登录密码需要你在vultr中点击服务器查看具体信息。 5.部署shadowsocks服务端 进入之后，部署很简单，只需要按顺序输入几条命令。 1.下载shadowsocks 1wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh 2.提升权限 1chmod +x shadowsocks.sh 3. 1./shadowsocks.sh 2>&1 | tee shadowsocks.log 总共三条命令，中间会提示你输入服务器IP地址和端口，端口是你自己指定，选择范围在1-65536。 另外，中间还会选择加密方式，一般选择7，即aes-256-cfb。 完成之后，会给你一个服务器端的具体信息清单，你记得截图保存。 6.客户端安装shadowsocks 去下载列表中选择对应版本shadowsocks， 解压之后，直接点击纸飞机图标运行程序，根据你自己的配置填写进去就可， 7.设置pac 如果不设置pac，所有的浏览器访问都需要经过代理，包括国内的，这是没必要的，会造成响应慢，pac模式指的是只有被墙的网站才使用代理访问。 你的右下角任务栏里会有小飞机图标，右键 -> 系统代理 -> pac模式。 8.开始你的科学上网","link":"/2019/12/29/%E8%AE%A1%E7%AE%97%E6%9C%BA/ss%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E9%85%8D%E7%BD%AE/"},{"title":"字节流和字符流探究","text":"前言以前在学习流概念的时候，一直会被提到字节流和字符流，也经常涉及到各种编码方式，如ASCII和UNICODE，但老师告知文本传输最好使用字符流，而其他的最好使用字节流，虽然知道用法，但是还是心中有所疑问，今天就探究之后做如下记录。 编码ANSCII编码计算机是美国人过出来的，所以一开始他们只需要考虑现实英文字母，而英文字母只有26个，外加上计算机上的其他32个不可显示字符和符号等，1个字节（可以表示256个不同的状态）的编码方式显然对他们足够了。 所以，ASCII一共规定了128个字符的编码，包括了英文字符和所有其他字符，这128个字符只占用了字节的后7位，开头一位统一规定为0。 非ANSII编码的产生ANCII只支持英文字符的现实，而地球上那么多语言，比如中文，德文，日文，每种语言的字母个数都不同而繁多，所有anscii编码对他们远远不够，所以在这阶段许多国家都有自己的编码标准，比如中国的GB2312,使用了两个字节表示 一个汉字，最多表示了 65536 个汉字。 Unicode正如前面所言，多种编码方式给不同语种之间的通信带来了很大的麻烦，经常会遇到文件打开乱码的情况，所以提出了一种包含了所有符号的编码方式——Unicode编码，现在Unicode编码已经包含了百万多的符号，具体的符号索引，可以查询 unicode.org。 注意，unicode虽然规定了符号的二进制编码形式，但一个字符存储到电脑上的二进制代码又是不同的，因为计算机并不能根据unicode编码知道字符占几个字节，简单来说，它需要一次编码解码过程，即将unicode进行编码成新的二进制代码存储到电脑。为什么需要这样做呢？我们知道，英文只需要一个字节就可以表示，汉字则最少需要两个字节，可能还有其他的需要3-4字节，如果unicode统一规定所有符号都用4字节编码表示，那么每个英文字母前面都有2-3字节是0，这将造成极大的浪费，所以需要一种具体落实unicode编码的技术——即UTF8、UTF16和UTF32都是实现unicode字符存储的实现方式。 UTF-8utf-8是当前应用最广的unicode实现方式，正如我们前面所说，为了解决浪费问题，它是一种变长编码方案，它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。 他的编码规则很简单： 对于单字节的符号，字节的第一位设为0，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。 对于n字节的符号（n > 1），第一个字节的前n位都设为1，第n + 1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码 下表总结了编码规则，字母x表示可用编码的位。 1234567Unicode符号范围 | UTF-8编码方式(十六进制) | （二进制）--------------------+---------------------------------------------0000 0000-0000 007F | 0xxxxxxx0000 0080-0000 07FF | 110xxxxx 10xxxxxx （11表明了占用两个字节，第二字节开头10占位）0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx （111表明符号长3字节）0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx（1111表明符号长4字节） 例子，严的 Unicode 是4E25（100111000100101），根据上表，可以发现4E25处在第三行的范围内（0000 0800 - 0000 FFFF），因此严的 UTF-8 编码需要三个字节，即格式是1110xxxx 10xxxxxx 10xxxxxx。然后，从严的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。这样就得到了，严的 UTF-8 编码是11100100 10111000 10100101，转换成十六进制就是E4B8A5。 过渡之前说了编码方式的由来，之后将基于java来探讨下编码和字节流、字符流之间的关系。 字节流计算机的最小存储单位是字节，所有文件，如视频、音频等等，亦包括文本，都将转换成二进制的字节流存储，所以其实从根本上来讲，后面的字符流只是在字节流上做了一层字符编码解码的工作。inputstream和outputstream是专门为字节流服务的两个类，字节流的应用偏向于非文本文件，应用比较清晰明了，不做赘述。 字符流我们说，字符流是字节流的包装，只是在字节流之外添加了一层字符集，只要我们指定字符集就可以实现对应的编解码，从java的继承层次上我们可以看到这层关系。 InputStreamReader是读取字符流的类，该类里面有成员StreamDecoder，而StreamDecoder 又包含了InputStream和Charset, 所以我们可以很明显知道，字符流其实是对字节流的包装。 对应的，outputStreamWriter是写入字符流的类。 在我们的应用程序中涉及到 I/O 操作时只要注意指定统一的编解码 Charset 字符集，这样一般不会出现乱码问题，有些应用程序如果不注意指定字符编码，中文环境中取操作系统默认编码，如果编解码都在中文环境中，通常也没问题，但是还是强烈的不建议使用操作系统的默认编码，因为这样，你的应用程序的编码格式就和运行环境绑定起来了，在跨环境下很可能出现乱码问题。 ​ ——选自参[2] 扩展场景的不同对编码方式的要求不一样，不一样的编码会导致效率等的不同，常见需要编码的场景是磁盘io和网络io，网络io需要经常用到编码，包括url、cookie和http header等，这里面的应用可以参考深入分析 Java 中的中文编码问题。 参考1.字符编码笔记：ASCII，Unicode和UTF-8 2.深入分析 Java 中的中文编码问题 3.Java 中字节流与字符流的区别?","link":"/2020/01/05/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E5%AD%97%E8%8A%82%E6%B5%81%E5%92%8C%E5%AD%97%E7%AC%A6%E6%B5%81%E6%8E%A2%E7%A9%B6/"}],"tags":[{"name":"SSM","slug":"SSM","link":"/tags/SSM/"},{"name":"shadowsocks","slug":"shadowsocks","link":"/tags/shadowsocks/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"字节流","slug":"字节流","link":"/tags/%E5%AD%97%E8%8A%82%E6%B5%81/"},{"name":"字符流","slug":"字符流","link":"/tags/%E5%AD%97%E7%AC%A6%E6%B5%81/"}],"categories":[{"name":"计算机","slug":"计算机","link":"/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"框架","slug":"计算机/框架","link":"/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%A1%86%E6%9E%B6/"},{"name":"常识","slug":"计算机/常识","link":"/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E5%B8%B8%E8%AF%86/"},{"name":"工具","slug":"计算机/工具","link":"/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E5%B7%A5%E5%85%B7/"}]}